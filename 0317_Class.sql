
--임시테이블 FROM dual 사용
SELECT 100 + 5, 10-3, 30*2, 10/3 FROM dual;  --사칙연산
SELECT dbms_random.value() * 100 FROM dual;  -- dbms_random은 0~0.99999~ 범위의 무작위수를 생성

SELECT ENAME FROM EMP AS employee;  -- 테이블명에는 별칭 사용 불가 alias. 컬럼명에만 별칭사용
SELECT ENAME AS "employee 뿌뿌뿌" FROM EMP employee; -- 별칭

SELECT * FROM EMP ORDER BY SAL;
SELECT * FROM EMP ORDER BY SAL DESC;
SELECT * FROM EMP ORDER BY DEPTNO ASC, SAL DESC;

SELECT * FROM nls_database_parameters;

SELECT ENAME
FROM EMP
WHERE DEPTNO = '20';

SELECT ENAME
FROM EMP
WHERE DEPTNO = '20';

SELECT * FROM EMP;


SELECT ENAME, JOB, SAL, DEPTNO
FROM EMP 
WHERE DEPTNO = 20    -- 자동 형변환
AND JOB = 'CLERK'
;

SELECT * FROM EMP WHERE SAL = 5000;
SELECT * FROM EMP WHERE SAL != 5000;
SELECT * FROM EMP WHERE SAL <> 5000;
SELECT * FROM EMP WHERE SAL ^= 5000;
SELECT * FROM EMP WHERE NOT SAL = 5000;

SELECT * FROM EMP
WHERE SAL = (SELECT MAX(SAL)
	FROM EMP);
	
--LIKE 연산자
SELECT * FROM EMP 
WHERE ENAME LIKE 'M%';

SELECT * FROM EMP
WHERE ENAME LIKE '_L%';

SELECT * FROM EMP
WHERE ENAME LIKE '%A_S%';

SELECT * FROM EMP
WHERE ENAME NOT LIKE '%S';

--NULL값에 대한 이해 
SELECT * FROM EMP WHERE COMM = NULL;
SELECT * FROM EMP WHERE COMM IS NULL;
SELECT * FROM EMP WHERE MGR = NULL;
SELECT * FROM EMP WHERE MGR IS NULL;

--UNION 키워드 (합집합)
SELECT EMPNO, ENAME, SAL, DEPTNO, JOB
FROM EMP WHERE JOB = 'CLERK'
UNION
SELECT EMPNO, ENAME, SAL, DEPTNO, JOB
FROM EMP WHERE JOB = 'SALESMAN';

--만약, 칼럼명이 서로 일치하지 않는 경우는?
SELECT EMPNO
	, ENAME
	, SAL
	, DEPTNO
FROM EMP 
WHERE DEPTNO = 10

UNION
SELECT EMPNO
	, ENAME
	, SAL
FROM EMP
WHERE DEPTNO = 20
;


--UNION 키워드 사용(합집합 후 중복값 제거)
SELECT EMPNO
	, ENAME
	, SAL
	, DEPTNO
	FROM EMP
	WHERE DEPTNO = 10
	UNION
	SELECT EMPNO, ENAME, SAL, DEPTNO
	FROM EMP
	WHERE DEPTNO = 10;
--UNION ALL 키워드 사용(합집합만 수행, 중복값 존재가능)
SELECT EMPNO
	, ENAME
	, SAL
	, DEPTNO
	FROM EMP
	WHERE DEPTNO = 10
	UNION ALL
	SELECT EMPNO, ENAME, SAL, DEPTNO
	FROM EMP
	WHERE DEPTNO = 10;


--MINUS 사용
SELECT EMPNO
	, ENAME
	, SAL
	, DEPTNO
	FROM EMP
	MINUS
	SELECT EMPNO
	, ENAME
	, SAL
	, DEPTNO
	FROM EMP
	WHERE DEPTNO = 10;

--오라클 함수리스트
SELECT * FROM v$sqlfn_metadata;
SELECT func_id, argnum, datatype FROM v$sqlfn_arg_metadata;
SELECT * FROM v$sqlfn_metadata
WHERE datatype = 'STRING';

--문자열 함수 사용
SELECT * FROM EMP
WHERE UPPER(ENAME) = UPPER('scott');

SELECT ENAME, LENGTH(ENAME) AS CNT FROM EMP
WHERE LENGTH(ENAME) >= 5;  --LENGTH 문자열 5이상인 경우

SELECT JOB
	,SUBSTR(JOB,1,2)
	,SUBSTR(JOB,3,2)
	,SUBSTR(JOB,5)
	FROM EMP;

SELECT '010-2912-1234' AS REPLACE_BEFORE
	,REPLACE('010-2912-1234', '-', '') AS REPLACE_1
	,REPLACE('010-2912-1234', '-') AS REPLACE_2
	FROM DUAL;

SELECT 'ORACLE', LPAD('ORACLE', 10, '#') AS LPAD_1
	,RPAD('ORACLE', 10, '*') AS RPAD_1
	,LPAD('ORACLE', 10) AS LPAD_2
	,RPAD('ORACLE', 10) AS RPAD_2
	FROM DUAL;

SELECT RPAD('971225-', 14, '*') AS RPAD_JMNO
	,RPAD('010-1234', 13, '*') AS RPAD_PHONE
FROM DUAL;

SELECT EMPNO, ENAME
	, CONCAT(EMPNO, ENAME)
	, CONCAT(EMPNO, CONCAT(':', ENAME))
FROM EMP e WHERE ENAME = 'SMITH';

-- 공백제거  (머릿말, 꼬릿말, 둘다)
SELECT '[' || TRIM(' _ _Oracle_ _ ') || ']' AS TRIM
	,'[' || TRIM(LEADING FROM ' _ _Oracle_ _ ') || ']' AS TRIM_LEADING
	,'[' || TRIM(TRAILING FROM ' _ _Oracle_ _ ') || ']' AS TRIM_TRAILING
	,'[' || TRIM(BOTH FROM ' _ _Oracle_ _ ') || ']' AS TRIM_BOTH
FROM DUAL;

-- 날짜함수

SELECT SYSDATE AS NOW
	, SYSDATE-1 AS YESTERDAY
	, SYSDATE+1 AS TOMORROW
FROM DUAL;

SELECT SYSDATE, ADD_MONTHS(SYSDATE, 3)
FROM DUAL;

SELECT EMPNO, ENAME, HIREDATE,
ADD_MONTHS(HIREDATE, 12*20) AS WORK20YEAR
FROM EMP;

-- 입사일로부터 40년 이상 근속한 직원 구하기
SELECT EMPNO, ENAME, HIREDATE, SYSDATE
FROM EMP
WHERE ADD_MONTHS(HIREDATE, 12*40)<SYSDATE;

SELECT SYSDATE 
      ,NEXT_DAY(SYSDATE,'월')  -- 다음 월요일
      ,LAST_DAY(SYSDATE)      --월말
FROM DUAL
;

-- EXTRACT(날짜, 데이터 형식)로 숫자 값 변환 (TO_CHAR는 문자열 반환)
SELECT ENAME
	,EXTRACT (YEAR FROM HIREDATE) AS Y
	,EXTRACT (month FROM HIREDATE) AS m
	,EXTRACT (day FROM HIREDATE) AS d
FROM EMP;	
	
-- 형변환
-- 암묵적 형변환: 사원코드에 '500' 문자열을 더하는 경우
SELECT EMPNO, ENAME, EMPNO + '500' FROM EMP
WHERE ENAME = 'SCOTT';

SELECT 1300 - '1500', '1300' + 1500 FROM DUAL;  --잘못된 방법

-- 명시적 형 변환  :: 9999는 단지 FORMAT


SELECT TO_NUMBER('1500', '9999')-1300
FROM DUAL;

-- 명시적 형 변환
SELECT TO_CHAR(SYSDATE, 'YYYY/MM/DD HH24:MI:SS') AS current_datetime
FROM DUAL;

SELECT SYSDATE
	,TO_CHAR(SYSDATE, 'MM') AS MM
	,TO_CHAR(SYSDATE, 'MON') AS MON
	,TO_CHAR(SYSDATE, 'MONTH') AS MONTH
	,TO_CHAR(SYSDATE, 'DD') AS DD
	,TO_CHAR(SYSDATE, 'DY') AS DY
	,TO_CHAR(SYSDATE, 'DAY') AS DAY
FROM DUAL;

SELECT SYSDATE
	,TO_CHAR(SYSDATE, 'MM') AS MM
	,TO_CHAR(SYSDATE, 'MON', 'NLS_DATE_LANGUAGE = KOREAN') AS MON_KOR
	,TO_CHAR(SYSDATE, 'MON', 'NLS_DATE_LANGUAGE = JAPANESE') AS MON_JPN
	,TO_CHAR(SYSDATE, 'MON', 'NLS_DATE_LANGUAGE = ENGLISH') AS MON_ENG
	,TO_CHAR(SYSDATE, 'MONTH', 'NLS_DATE_LANGUAGE = KOREAN') AS MONTH_KOR
	,TO_CHAR(SYSDATE, 'MONTH', 'NLS_DATE_LANGUAGE = JAPANESE') AS MONTH_JPN
	,TO_CHAR(SYSDATE, 'MONTH', 'NLS_DATE_LANGUAGE = ENGLISH') AS MONTH_ENG
FROM DUAL;

--NULL 처리 함수
-- NVL,,  입력값1이 NULL인 경우 입력값2를 사용
SELECT EMPNO, ENAME, SAL, COMM, SAL+COMM
	, NVL(COMM, 0)
	, SAL+ NVL(COMM, 0) AS yearSal
	FROM EMP;

-- DECODE와 CASE 함수
/*
 * 상황에 따라 다른 데이터를 반환하는 DECODE 함수와 CASE 문
 * DECODE 함수는 값을 true, false로 단순 처리하는 경우
 * case 함수 경우, decode와 달리 비교 조건을 지정하는 경우 
 * */

-- DECODE는 단순 TRUE, FALSE 처리    :: 이 값이면 요렇게 바꿔라,, 단순!
SELECT EMPNO, ENAME, JOB, SAL
	,DECODE(JOB,
			'MANAGER', SAL*0.2,   --JOB이 MANAGER인 경우
			'SALESMAN', SAL*0.3,
			'ANALYST', SAL*0.05,
			SAL*0.1) AS BONUS     --JOB에 따라 보너스 신청
	FROM EMP;

-- CASE는 비교 조건을 지정             :: 
SELECT  EMPNO, ENAME, JOB, SAL
, CASE JOB
			WHEN 'MANAGER' THEN SAL*0.2
			WHEN 'SALESMAN' THEN SAL*0.3
			WHEN 'ANALYST' THEN SAL*0.05
			ELSE SAL*0.1 -- 기타 모든 케이스
			END AS BONUS
FROM EMP;

-- JOIN문 : INNER-JOIN (교집합 연결)

--교집합 조인 INNER JOIN   :: 오라클 문법
SELECT *
FROM EMP, DEPT
WHERE EMP.DEPTNO = DEPT.DEPTNO ORDER BY EMPNO;

--JOIN ~ ON 으로 등가 조인 (INNER-JOIN)   :: 표준SQL문법
SELECT *
FROM EMP E JOIN DEPT D ON(E.DEPTNO = D.DEPTNO) 
ORDER BY EMPNO;

--USING 구문 활용           :: 표준SQL문법
SELECT *
FROM EMP E JOIN DEPT D USING (DEPTNO)
ORDER BY E.EMPNO;

--JOIN에 WHERE 조건식 추가
SELECT E.EMPNO, E.ENAME, E.SAL,D.DEPTNO, D.DNAME, D.LOC
	FROM EMP E, DEPT D
	WHERE E.DEPTNO = D.DEPTNO 
		AND SAL <= 2000;
		
SELECT E.EMPNO, E.ENAME, E.SAL,D.DEPTNO, D.DNAME, D.LOC
	FROM EMP E, DEPT D
	WHERE E.DEPTNO = D.DEPTNO 
		AND E.SAL <= 2000;    --테이블명 지정? 값이 똒같은데..
		
-- LOSAL과 HISAL 값 사이의 급여에 해당하는 직원만 출력
SELECT ENAME, JOB, SAL, GRADE, LOSAL, HISAL
FROM EMP E, SALGRADE S
WHERE E.SAL BETWEEN S.LOSAL AND S.HISAL;